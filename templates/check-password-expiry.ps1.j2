<# 
  scripts/check_password_expiry.ps1.j2 
  -- returns JSON array of ALL enabled users whose passwords can expire,
     with DaysToExpire (could be > threshold), and EmailAddress (empty if none).
#>

Import-Module ActiveDirectory

$today = Get-Date

# Fetch all enabled users whose passwords can expire (ignoring already-expired)
$rawUsers = Get-ADUser -Filter { {{ get_ad_user_filter }} } `
           -Properties Name, SamAccountName, EmailAddress, ProxyAddresses, PasswordLastSet, PasswordExpired

$results = @()

foreach ($u in $rawUsers) {
    # If the password is already expired, we still compute DaysToExpire negative (for completeness)
    # but we do not skip them; we always include every user
    # Determine effective MaxPasswordAge:
    $pol = Get-ADUserResultantPasswordPolicy -Identity $u.DistinguishedName
    if ($pol) {
        $maxAge = $pol.MaxPasswordAge
    } else {
        $maxAge = (Get-ADDefaultDomainPasswordPolicy).MaxPasswordAge
    }

    # If PasswordLastSet is $null (never set), treat as 0 daysLeft
    $pwdSet = $u.PasswordLastSet
    if (-not $pwdSet) {
        $expirationDate = $today
    } else {
        $expirationDate = $pwdSet + $maxAge
    }

    $daysLeft = (New-TimeSpan -Start $today -End $expirationDate).Days

    # Determine e-mail address: use EmailAddress or empty string if none
    $email = $null
    if ($u.EmailAddress) {
        $email = $u.EmailAddress
    } else {
        # Try proxyAddresses, pick first “SMTP:” entry if present
        $smtpList = $u | Get-ADUser -Properties ProxyAddresses | Select-Object -ExpandProperty ProxyAddresses
        foreach ($addr in $smtpList) {
            if ($addr -cmatch '^SMTP') {
                $email = $addr.TrimStart("SMTP:")
                break
            }
        }
    }
    if (-not $email) {
        $email = ""  # no e-mail on file
    }

    $results += [PSCustomObject]@{
        DisplayName    = $u.Name
        SamAccountName = $u.SamAccountName
        EmailAddress   = $email
        DaysToExpire   = $daysLeft
    }
}

# Emit JSON so Ansible can parse it
$results | ConvertTo-Json -Depth 4
